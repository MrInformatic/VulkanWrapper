template<typename BitEnumType,typename BitmaskType = VkFlags> 
class Bitmask{
  public:
  	Bitmask() : bitmask(0){

  	}

  	Bitmask(std::nullptr_t) : bitmask(0){

  	}

  	explicit Bitmask(BitmaskType bitmask_) : bitmask(bitmask_){
  	
  	}

  	Bitmask(Bitmask<BitEnumType> bitmask_) : bitmask(bitmask_){
  	
  	}

  	Bitmask(Bitmask<BitEnumType,BitmaskType> bitmask_) : bitmask(bitmask_){
  	
  	}

  	bool getBit(BitEnumType bitEnum){
  	  return bitmask & bitEnum;
  	}

  	void setBit(BitEnumType bitEnum, bool value){
  	  if(getBit(bitEnum)!=value){
  	  	switchBit(bitEnum)
  	  }
  	}

  	void addBit(BitEnumType bitEnum){
  	  bitmask |= bitEnum;
  	}

  	void removeBit(BitEnumType bitEnum){
  	  bitmask &= !bitEnum;
  	}

  	void switchBit(BitEnumType bitEnum){
  	  bitmask ^= bitEnum;
  	}

  	explicit operator BitmaskType() const{
  		return bitmask;
  	}
  private:
  	BitmaskType bitmask;
}